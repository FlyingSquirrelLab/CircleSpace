plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.1'
	id 'io.spring.dependency-management' version '1.1.5'
}

group = 'com'
version = '0.0.1-SNAPSHOT'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

repositories {
	mavenCentral()
	maven { url 'https://jitpack.io' }
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	implementation 'org.jsoup:jsoup:1.18.1'
	implementation 'org.seleniumhq.selenium:selenium-java:4.16.1'
	implementation 'org.seleniumhq.selenium:selenium-chrome-driver:4.16.1'
	implementation 'org.springframework.boot:spring-boot-starter-hateoas'

	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	runtimeOnly 'com.mysql:mysql-connector-j'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'io.awspring.cloud:spring-cloud-aws-starter-s3:3.1.1'

	implementation 'com.google.code.gson:gson:2.10.1'

	implementation 'io.jsonwebtoken:jjwt-api:0.12.3'
	implementation 'io.jsonwebtoken:jjwt-impl:0.12.3'
	implementation 'io.jsonwebtoken:jjwt-jackson:0.12.3'

	implementation 'net.nurigo:sdk:4.3.0'
	implementation 'org.springframework.boot:spring-boot-starter-mail'

}

tasks.named('test') {
	useJUnitPlatform()
}
bootJar {
	archiveFileName = 'circlespace.jar'
	manifest {
		attributes(
				'Start-Class': 'com.teame.TeamEApplication'
		)
	}
}

def webappDir = "$projectDir/src/frontend"

def npmPath = System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('mac') ? "/opt/homebrew/bin/npm" : "/usr/bin/npm"

def githubNpmPath = "/opt/hostedtoolcache/node/18.20.5/x64/bin/npm"

sourceSets {
	main {
		resources {
			srcDirs = ["$webappDir/build", "$projectDir/src/main/resources"]
		}
	}}

processResources {
	dependsOn "copyWebApp"
}

task copyWebApp(type: Copy) {
	dependsOn "buildReact"
	from "$webappDir/dist"
	into "$projectDir/src/main/resources/static"
}

task buildReact(type: Exec) {
	dependsOn "installReact"
	workingDir "$webappDir"
	inputs.dir "$webappDir"
	group = BasePlugin.BUILD_GROUP
	if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
		commandLine "npm.cmd", "run", "build"
	} else if(System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('mac')) {
		commandLine npmPath, "run", "build"
	} else{
		commandLine githubNpmPath, "run", "build"
	}
}

task installReact(type: Exec) {
	workingDir "$webappDir"
	inputs.dir "$webappDir"
	group = BasePlugin.BUILD_GROUP
	if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
		commandLine "npm.cmd", "audit", "fix"
		commandLine "npm.cmd", "install"
	} else if(System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('mac')) {
		commandLine npmPath, "audit", "fix"
		commandLine npmPath, "install"
	} else{
		commandLine githubNpmPath, "audit", "fix"
		commandLine githubNpmPath, "install"
	}
}
